function ZhuanLongWan() {
    // 基于准备好的dom，初始化echarts实例
    var dom = document.getElementById('Zhuan_Long_Wan');
    var myChart = echarts.init(dom, null, {
        renderer: 'canvas',
        useDirtyRect: false
    });
    let option = {
        // title: {
        //     // text: '转\n龙\n湾\n煤\n矿\n一\n到\n六\n月\n份\n用\n电\n情\n况',
        //     text: '转龙湾煤矿一到六月份用电情况',
        //     // textVerticalAlign: 'bottom',
        //     textAlign: 'bottom',
        //     top: 'bottom',
        //     left: 'center',
        //     // left: '1.2%',
        //     textStyle: {
        //         // fontWeight: 'bolder',
        //         fontSize: 17
        //     }
        // },

        color: ['#2db7f5', '#ff6600', '#808bc6'],
        legend: {
            icon: 'roundRect',
            data: ['1月最大分时负荷(1.16号)', '1月最小分时负荷(1.31号)', '2月最大分时负荷(2.27号)', '2月最小分时负荷(2.01号)', '3月最大分时负荷(3.23号)', '3月最小分时负荷(3.26号)', '4月最大分时负荷(4.08号)', '4月最小分时负荷(4.21号)', '5月最大分时负荷(5.22号)', '5月最小分时负荷(5.26号)', '6月最大分时负荷(6.26号)', '6月最小分时负荷(6.29号)'],
            textStyle: {
                fontSize: 12,
                color: '#666'
            },
            top: '1.4%',
            width: '100%',
            // left: '8%',
        },
        label: {
            show: true,
            position: 'bottom',
            textStyle: {
                fontSize: 10
            }
        },
        toolbox: {
            show: true,                                 //是否显示工具栏组件
            orient: 'vertical',                        //工具栏 icon 的布局朝向'horizontal' 'vertical'
            itemSize: 15,                                 //工具栏 icon 的大小
            itemGap: 10,                                  //工具栏 icon 每项之间的间隔
            showTitle: true,                             //是否在鼠标 hover 的时候显示每个工具 icon 的标题
            feature: {
                mark: {                                 // '辅助线开关'
                    show: true
                },
                dataView: {                            //数据视图工具，可以展现当前图表所用的数据，编辑后可以动态更新
                    show: true,                         //是否显示该工具。
                    title: "数据视图",
                    readOnly: false,                    //是否不可编辑（只读）
                    lang: ['数据视图', '关闭', '刷新'],  //数据视图上有三个话术，默认是['数据视图', '关闭', '刷新']
                    backgroundColor: "#fff",             //数据视图浮层背景色。
                    textareaColor: "#fff",               //数据视图浮层文本输入区背景色
                    textareaBorderColor: "#333",         //数据视图浮层文本输入区边框颜色
                    textColor: "#000",                    //文本颜色。
                    buttonColor: "#c23531",              //按钮颜色。
                    buttonTextColor: "#fff",             //按钮文本颜色。
                },
                magicType: {                            //动态类型切换
                    show: true,
                    title: "切换",                       //各个类型的标题文本，可以分别配置。
                    type: ['line', 'bar'],              //启用的动态类型，包括'line'（切换为折线图）, 'bar'（切换为柱状图）, 'stack'（切换为堆叠模式）, 'tiled'（切换为平铺模式）
                },
                restore: {                             //配置项还原。
                    show: true,                         //是否显示该工具。
                    title: "还原",
                },
                saveAsImage: {                         //保存为图片。
                    show: true,                         //是否显示该工具。
                    type: "png",                         //保存的图片格式。支持 'png' 和 'jpeg'。
                    name: "pic1",                        //保存的文件名称，默认使用 title.text 作为名称
                    backgroundColor: "#ffffff",        //保存的图片背景色，默认使用 backgroundColor，如果backgroundColor不存在的话会取白色
                    title: "保存为图片",
                    pixelRatio: 1                        //保存图片的分辨率比例，默认跟容器相同大小，如果需要保存更高分辨率的，可以设置为大于 1 的值，例如 2
                },
                dataZoom: {                             //数据区域缩放。目前只支持直角坐标系的缩放
                    show: true,                         //是否显示该工具。
                    title: "缩放",                       //缩放和还原的标题文本
                    xAxisIndex: 0,                       //指定哪些 xAxis 被控制。如果缺省则控制所有的x轴。如果设置为 false 则不控制任何x轴。如果设置成 3 则控制 axisIndex 为 3 的x轴。如果设置为 [0, 3] 则控制 axisIndex 为 0 和 3 的x轴
                    yAxisIndex: false,                   //指定哪些 yAxis 被控制。如果缺省则控制所有的y轴。如果设置为 false 则不控制任何y轴。如果设置成 3 则控制 axisIndex 为 3 的y轴。如果设置为 [0, 3] 则控制 axisIndex 为 0 和 3 的y轴
                },
            },
            zlevel: 0,                                   //所属图形的Canvas分层，zlevel 大的 Canvas 会放在 zlevel 小的 Canvas 的上面
            z: 2,                                         //所属组件的z分层，z值小的图形会被z值大的图形覆盖
            // left: "center",                              //组件离容器左侧的距离,'left', 'center', 'right','20%'
            top: "middle",                                   //组件离容器上侧的距离,'top', 'middle', 'bottom','20%'
            right: "2%", //                               //组件离容器右侧的距离,'20%'
            bottom: "auto",                              //组件离容器下侧的距离,'20%'
            width: "auto",                               //图例宽度
            height: "auto",                              //图例高度
        },
        grid: {
            top: '18%',
            height: 480
        },
        xAxis: {
            type: 'category',
            data: ['0时', '1时', '2时', '3时', '4时', '5时', '6时', '7时', '8时', '9时', '10时', '11时', '12时', '13时', '14时', '15时', '16时', '17时', '18时', '19时', '20时', '21时', '22时', '23时'],
            // data: ['0-1时', '1-2时', '2-3时', '3-4时', '4-5时', '5-6时', '6-7时', '7-8时', '8-9时', '9-10时', '10-11时', '11-12时', '12-13时', '13-14时', '14-15时', '15-16时', '16-17时', '17-18时', '18-19时', '19-20时', '20-21时', '21-22时', '22-23时', '23-24时']
            // nameLocation: 'end'
        },
        yAxis: {
            type: 'value'
        },
        series: [
            {
                name: '1月最大分时负荷(1.16号)',
                data: [17383.0, 11751.0, 11403.0, 12577.0, 12300.0, 10698.0, 12568.0, 9438.0, 8725.0, 10020.0, 11675.0, 11658.0, 13557.0, 18417.0, 16101.0, 15719.0, 10458.0, 14323.0, 14120.0, 12643.0, 13812.0, 15254.0, 14632.0, 11567.0],
                type: 'line'
            },
            {
                name: '1月最小分时负荷(1.31号)',
                data: [4358.0, 4263.0, 4216.0, 3841.0, 3828.0, 4245.0, 3455.0, 4380.0, 4211.0, 3944.0, 4066.0, 4086.0, 3962.0, 3723.0, 3600.0, 3842.0, 4000.0, 3778.0, 4192.0, 3569.0, 3155.0, 3822.0, 3790.0, 3310.0],
                type: 'line'
            },
            {
                name: '2月最大分时负荷(2.27号)',
                data: [17392.0, 16341.0, 14993.0, 16068.0, 16405.0, 14700.0, 18137.0, 14363.0, 12480.0, 11983.0, 11110.0, 13850.0, 16106.0, 17259.0, 15771.0, 12602.0, 13675.0, 13781.0, 12416.0, 13676.0, 15366.0, 15467.0, 13247.0, 13346.0],
                type: 'line'
            },
            {
                name: '2月最小分时负荷(2.01号)',
                data: [3478.0, 3807.0, 3034.0, 4118.0, 3511.0, 3659.0, 4066.0, 3766.0, 3827.0, 3559.0, 4201.0, 3739.0, 3405.0, 3452.0, 3456.0, 3647.0, 4002.0, 4918.0, 4069.0, 3582.0, 3895.0, 3982.0, 3454.0, 3943.0],
                type: 'line'
            },
            {
                name: '3月最大分时负荷(3.23号)',
                data: [15476.0, 17004.0, 14829.0, 15356.0, 17263.0, 16945.0, 13521.0, 10972.0, 8863.0, 7821.0, 6546.0, 5007.0, 9108.0, 12588.0, 14873.0, 13742.0, 13008.0, 13329.0, 13552.0, 14525.0, 13458.0, 14300.0, 14510.0, 13032.0],
                type: 'line'
            },
            {
                name: '3月最小分时负荷(3.26号)',
                data: [11117.0, 13612.0, 12395.0, 14676.0, 16996.0, 13540.0, 11174.0, 8373.0, 5554.0, 4277.0, 4018.0, 3167.0, 3444.0, 3302.0, 3079.0, 3486.0, 3976.0, 3540.0, 3473.0, 3850.0, 3585.0, 3457.0, 3618.0, 3731.0],
                type: 'line'
            },
            {
                name: '4月最大分时负荷(4.08号)',
                data: [13532.0, 17454.0, 17494.0, 17510.0, 17396.0, 15150.0, 15924.0, 12455.0, 8524.0, 9381.0, 11682.0, 12874.0, 13714.0, 14616.0, 16284.0, 14912.0, 15252.0, 16678.0, 13996.0, 17867.0, 18804.0, 15464.0, 16845.0, 12795.0],
                type: 'line'
            },
            {
                name: '4月最小分时负荷(4.21号)',
                data: [10692.0, 13998.0, 15051.0, 13136.0, 11959.0, 14606.0, 14277.0, 10250.0, 7676.0, 5494.0, 4570.0, 4292.0, 4655.0, 9041.0, 8778.0, 4353.0, 6003.0, 13851.0, 13299.0, 15598.0, 14545.0, 15108.0, 12743.0, 13155.0],
                type: 'line'
            },
            {
                name: '5月最大分时负荷(5.22号)',
                data: [11597.0, 11698.0, 11118.0, 13899.0, 12229.0, 13735.0, 14583.0, 10433.0, 12698.0, 18842.0, 15869.0, 14172.0, 17093.0, 19100.0, 14189.0, 12629.0, 12659.0, 10904.0, 7660.0, 10904.0, 12985.0, 15528.0, 14116.0, 14643.0],
                type: 'line'
            },
            {
                name: '5月最小分时负荷(5.26号)',
                data: [14067.0, 16213.0, 15069.0, 14528.0, 16849.0, 13799.0, 10438.0, 11124.0, 5676.0, 3003.0, 2671.0, 3168.0, 3060.0, 3917.0, 4014.0, 3691.0, 3355.0, 3185.0, 3953.0, 3689.0, 3269.0, 3251.0, 3021.0, 3731.0],
                type: 'line'
            },
            {
                name: '6月最大分时负荷(6.26号)',
                data: [15831.0, 14982.0, 16001.0, 19355.0, 17651.0, 17105.0, 17565.0, 15122.0, 14159.0, 15231.0, 16661.0, 13407.0, 15768.0, 16267.0, 17847.0, 15867.0, 11982.0, 9307.0, 12750.0, 12664.0, 10847.0, 11127.0, 12384.0, 9206.0],
                type: 'line'
            },
            {
                name: '6月最小分时负荷(6.29号)',
                data: [11786.0, 14559.0, 15098.0, 13779.0, 11991.0, 7482.0, 4555.0, 3647.0, 4141.0, 4477.0, 4716.0, 7119.0, 9266.0, 10289.0, 5075.0, 4971.0, 4412.0, 4291.0, 4297.0, 4708.0, 4724.0, 4030.0, 5661.0, 8084.0],
                type: 'line'
            }
        ],
    };
    myChart.setOption(option);
    window.addEventListener('resize', myChart.resize);
}